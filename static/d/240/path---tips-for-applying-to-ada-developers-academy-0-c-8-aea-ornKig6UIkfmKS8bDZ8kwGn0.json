{"data":{"markdownRemark":{"html":"<p>If you are reading this, you're probably aware that Ada Developers Academy has opened the application window for the second cohort of women looking to switch careers and learn how to program! As a current Ada student, I get approached IRL and online frequently by other women for my opinion about Ada and some tips on applying. As a new developer, I suffer from what I call \"side-projectitis\", an always growing list of extra programming projects and things to build, so even though I don't have much time to answer the same questions over and over again, I still wanted to be able to give prospective students some of that information they want when they reach out to us current students. So today I'm going to share some quick hints for making the best application you can!</p>\n<h4>1. Read the directions:</h4>\n<p>Seriously, read the directions. Then read them again. Do this before you start working on any part of the application. When the application asks you to answer a question in less than 200 words, be sure to do a word count and make sure you did not accidentally write double that. While being thorough in your answer is important, being able to follow directions will demonstrate that you will be a good student.</p>\n<h4>2. Your video needs to be 5 minutes max.</h4>\n<p>I know this is almost the same tip as tip number one, but it is surprising the number of videos that didn't actually follow this direction. The video should demonstrate your personality, answer the prompts, and be polished- and no matter how difficult it seems to introduce yourself &#x26; answer everything convincingly, you can do it. We all did it, and the people who are also applying will do it. Between two great videos, the one that is 5 minutes like instructed will always win out over the 7 minute video. There is basically no way for it not be painfully dorky and awkward, so don't worry about your video. Most of us hated the video part too; remember to mark your video as unlisted so that only those with the link will see it if you are embarrassed!</p>\n<h4>Bonus tip 2.5:</h4>\n<p>Send the link to your video to a friend, or open it in a different browser when you aren't signed in to youtube. If it's not visible then, the application reviewers won't be able to see it either. Double check that it's set to unlisted, not private.</p>\n<h4>3. Creep on LinkedIn:</h4>\n<p>Why creep on linkedin? So you can crowdsource your resume! Of course I don't mean copying other people's work history, but linkedin is a great resource for figuring out not just what to say, but how to say it. First find people who have jobs similar to your own. Look at how they are describing their current position. You might be overlooking a really important skill you demonstate because you don't know how to list it on your resume. I have found many of my female friends all do the same thing: we talk ourselves out of listing something because we don't think it's that important. Avoid this! Keep in mind that since you are submitting your resume as a gist you don't have to worry about fitting it all on one page, so write as much as you can first- then edit it down to be clear and concise.</p>\n<p>Next, look at linkedin profiles of the position you want. Look at all the Ada student's profiles, then look at junior developer's profiles. Are those the things you are interested in learning? Do you have similar skills? Tailor your resume to emulate what you see by finding the common skills.</p>\n<h4>4. Visualize the logic problems:</h4>\n<p>When working on the logic problems, be sure to approach them in as many ways as you can. There are two really great ways to tackle these logic problems: whiteboarding and simulation. For the first logic problem about the tarot reader's cats, whiteboarding can help you solve this problem. Take the time to write out the problem in your own words, checking to make sure you have correctly parsed the pertinent clues. Write out all the possibilities you find. Writing on a whiteboard, or even just a large piece of paper, can help you keep track of the steps you are taking to solve the problem. Then you can retrace your steps and find any holes in your logic, or places where you can expand your answer for other possible explanations.</p>\n<p>Simulation is also a great technique for solving logic problems and is a perfect fit for the second logic problem. Enlist your coworkers or friends to act out the situation described in the problem. While many women who are driven to take risks and learn on their own sometimes feel like they need to \"prove themselves\" by solving it all alone, keep in mind that it's not wrong to work with a team. In fact, doing so illustrates that not only do you know how to work with others, but that you know when to ask for help. In Ada and as a developer, you will need to be able to work closely with other people and talk through the code in order to expose the design and fix bugs. Demonstrate these people skills by working with others to solve this problem!</p>\n<h4>5. Have someone review your application</h4>\n<p>Your BFF or parent is a good place to start, but there are many other people who could probably give you a better perspective and a more honest assessment of your strengths and weaknesses. Managers &#x26; bosses are a great resource for this if they are supporting you applying to Ada. Do you know a developer? Ask them to review your application! The tech people you already know will help you understand terms and technologies, and becoming familiar with the landscape. These people are great resources for reviewing all the written parts of your application, especially the logic problems and the technical reading assessment. If you don't have access to someone in tech, make sure you have someone who is a strong writer review your application. A few little typos show a lack of attention to detail, whereas a cleanly polished application comes across as professional and competent.</p>\n<h4>6. Learn how to actually save a gist as a markdown file.</h4>\n<p>When you save your gists, do you still see your formatting marks? If so, it's not being saved properly so it can be rendered. I made this mistake on my application until my mentor taught me how to do it. Check out this screenshot:</p>\n<p><img src=\"/content/images/2014/Jun/markdown-1.png\" alt=\"screenshot of a github gist\"></p>\n<p>While intuitively, it seems as though by just selecting markdown in the dropdown menu would be all you need to do, you actually need to put \".md\" or \".markdown\" in the filename. When you do this and save, you should now see your markdown rendered when you look at the gist.</p>\n<p>I hope this helps as you start your application for Ada Developers Academy! If you have more questions about Ada, send them a tweet at <a href=\"https://twitter.com/adaacademy\">@adaacademy.</a></p>\n<p>Don't forget: applications are due June 16th!</p>","frontmatter":{"date_published":"May 30, 2014","path":"/tips-for-applying-to-ada-developers-academy","title":"Tips for applying to Ada Developers Academy"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}