{"version":3,"sources":["webpack:///./src/templates/BlogPostTemplate/BlogPostTemplate.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/templates/Layout.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO.js","webpack:///./src/components/InternalLink/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Template","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Layout__WEBPACK_IMPORTED_MODULE_1__","_components_SEO__WEBPACK_IMPORTED_MODULE_2__","_components_InternalLink_index__WEBPACK_IMPORTED_MODULE_3__","_ref","markdownRemark","data","frontmatter","html","a","createElement","title","keywords","className","date_published","dangerouslySetInnerHTML","__html","to","color","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","query","render","finalData","Fragment","props","children","Consumer","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","Layout","react__WEBPACK_IMPORTED_MODULE_3___default","gatsby__WEBPACK_IMPORTED_MODULE_1__","style","margin","maxWidth","padding","_public_static_d_2994927498_json__WEBPACK_IMPORTED_MODULE_0__","node","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","shape","pathname","SEO","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","InternalLink","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","styles"],"mappings":"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","file":"component---src-templates-blog-post-template-blog-post-template-js-93dd82581df70b2c7ded.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport { Layout } from '../Layout'\nimport { SEO } from '../../components/SEO'\nimport { InternalLink } from '../../components/InternalLink/index'\n\nexport default function Template({ data }) {\n  const { markdownRemark } = data\n  const { frontmatter, html } = markdownRemark\n  return (\n    <Layout>\n      <SEO\n        title={frontmatter.title}\n        keywords={[frontmatter.title, `liz rush`, `blog`]}\n      />\n\n      <div className=\"blog-post-container\">\n        <div className=\"blog-post\">\n          <h1>{frontmatter.title}</h1>\n          <h2>{frontmatter.date_published}</h2>\n          <div\n            className=\"blog-post-content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n      </div>\n\n      <InternalLink to=\"/blog\" color=\"pink\">\n        ‚üµ back\n      </InternalLink>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date_published(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import { graphql, StaticQuery } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport './layout.css'\nimport '../shared/shared.scss'\n\nexport function Layout({ children }) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query SiteTitleQuery {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      `}\n      render={() => (\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `2.45rem 1.5rem`,\n          }}\n        >\n          {children}\n        </div>\n      )}\n    />\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nexport function SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport styles from './styles.module.scss'\n\nexport function InternalLink({ color, children, ...props }) {\n  return (\n    <Link className={styles[color]} {...props}>\n      {children}\n    </Link>\n  )\n}\n"],"sourceRoot":""}